<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net9.0-android;net9.0-ios;net9.0-maccatalyst;net9.0</TargetFrameworks>
		<TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net9.0-windows10.0.19041.0</TargetFrameworks>
		<!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
		<!-- <TargetFrameworks>$(TargetFrameworks);net9.0-tizen</TargetFrameworks> -->
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<MauiVersion>9.0.110</MauiVersion>
		<SkipValidateMauiImplicitPackageReferences>true</SkipValidateMauiImplicitPackageReferences>
		<NoWarn>$(NoWarn);CA1416</NoWarn>
		
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
	</PropertyGroup>
	
  <ItemGroup>
    <EmbeddedResource Include="Resources\Images\**\*.png" />
  </ItemGroup>

	<ItemGroup>
	  <None Include="..\..\bwhittaker69.png" Link="bwhittaker69.png">
	    <PackagePath>\</PackagePath>
	    <Pack>True</Pack>
	  </None>
	  <None Include="..\..\LICENSE.txt" Link="LICENSE.txt">
	    <PackagePath>\</PackagePath>
	    <Pack>True</Pack>
	  </None>
	  <None Include="..\..\README.md" Link="README.md">
	    <PackagePath>\</PackagePath>
	    <Pack>True</Pack>
	  </None>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
	</ItemGroup>

	<ItemGroup>
	  <Compile Update="Platforms\Android\UiEditorHandler.Android.cs">
	    <ExcludeFromCurrentConfiguration>true</ExcludeFromCurrentConfiguration>
	  </Compile>
	  <Compile Update="Platforms\iOS\UiPickerHandler.iOS.cs">
	    <ExcludeFromCurrentConfiguration>false</ExcludeFromCurrentConfiguration>
	  </Compile>
	</ItemGroup>



	<PropertyGroup>
		<!-- Root of your source images -->
		<ImagesRoot>$(MSBuildProjectDirectory)\Resources\Images</ImagesRoot>

		<!-- Source set: all PNGs whose name contains "72" -->
		<BaseSetDir>$(ImagesRoot)\size72</BaseSetDir>

		<!-- ImageMagick executable -->
		<MagickExe Condition="'$(MagickExe)'==''">C:\Program Files\ImageMagick-7.1.2-Q16-HDRI\magick.exe</MagickExe>
	</PropertyGroup>

	<ItemGroup>
		<!-- Declare the target sizes; flip <Enabled>true/false</Enabled> per size -->
		<TargetSize Include="12">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="16">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="24">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="29">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="32">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="36">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="40">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="48">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="56">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="58">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="64">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="76">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="80">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="87">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="96">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="108">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="120">
			<Enabled>false</Enabled>
		</TargetSize>
		<TargetSize Include="128">
			<Enabled>false</Enabled>
		</TargetSize>

		<!-- Source images -->
		<BaseImages Include="$(BaseSetDir)\*72*.png" />
	</ItemGroup>


	<!-- Entry point: runs once, expands into a call per size -->
	<Target Name="ProcessAllImageSizes" BeforeTargets="CoreCompile">
		<!-- Pick only enabled sizes (missing <Enabled> counts as true) -->
		<ItemGroup>
			<SizesToDo Include="@(TargetSize)" Condition=" '%(TargetSize.Enabled)' == '' or %(TargetSize.Enabled) " />
		</ItemGroup>

		<Message Text="Resizing sizes: @(SizesToDo->'%(Identity)', ', ')" Importance="High" Condition="'@(SizesToDo)' != ''" />

		<!-- Call ProcessSize target for each size -->
		<MSBuild Projects="$(MSBuildProjectFile)" Targets="ProcessSize" Properties="CurrentSize=%(SizesToDo.Identity)" />
	</Target>

	<!-- Called once per size (CurrentSize) -->
	<Target Name="ProcessSize" Condition="'$(CurrentSize)' != ''">

		<PropertyGroup>
			<OutDir>$(ImagesRoot)\size$(CurrentSize)</OutDir>
		</PropertyGroup>

		<!-- Always clean the output directory first -->
		<RemoveDir Directories="$(OutDir)" Condition="Exists('$(OutDir)')" />
		<MakeDir Directories="$(OutDir)" />

		<!-- Do per-file work; incremental if BaseImages unchanged -->
		<Message Text="Generating $(OutDir)\*.png from @(BaseImages->'%(Filename)%(Extension)', ', ')" Importance="Low" />

		<!-- Batch over files; rename by replacing '72' with $(CurrentSize) -->
		<Exec Command="&quot;$(MagickExe)&quot; &quot;%(BaseImages.FullPath)&quot; -resize $(CurrentSize)x$(CurrentSize) &quot;$(OutDir)\$([System.String]::Copy('%(BaseImages.Filename)').Replace('72','$(CurrentSize)'))%(BaseImages.Extension)&quot;" StandardOutputImportance="Low" StandardErrorImportance="High" WorkingDirectory="$(MSBuildProjectDirectory)">
			<!-- Re-run when inputs change -->
			<Output TaskParameter="Outputs" ItemName="__unused" />
		</Exec>
	</Target>







</Project>
